
STM32F4xxHardwareAbstractionLayer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000076c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080008f4  080008fc  000108fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080008f4  080008f4  000108fc  2**0
                  CONTENTS
  4 .ARM          00000000  080008f4  080008f4  000108fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008f4  080008fc  000108fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008f4  080008f4  000108f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080008f8  080008f8  000108f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000108fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000108fc  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000108fc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0001092c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001000  00000000  00000000  0001096f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000004ac  00000000  00000000  0001196f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000108  00000000  00000000  00011e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000b5  00000000  00000000  00011f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000196ed  00000000  00000000  00011fdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000215a  00000000  00000000  0002b6ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008e075  00000000  00000000  0002d824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000002cc  00000000  00000000  000bb89c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  000bbb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080008dc 	.word	0x080008dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080008dc 	.word	0x080008dc

080001c8 <RCC_OscillatorConfig>:
 *
 * RETURN		:	Status_t - Return HAL_OK, HAL_ERROR to help debug problems
 *
 * **************************************************************************/
Status_t RCC_OscillatorConfig(RCC_OscInit_t *RCC_OscInitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	uint32_t sysClkSrc, pllClkSrc;

	sysClkSrc = RCC_GET_SYSCLK_SRC();		//Identify the System Clock Source
 80001d0:	4b79      	ldr	r3, [pc, #484]	; (80003b8 <RCC_OscillatorConfig+0x1f0>)
 80001d2:	689b      	ldr	r3, [r3, #8]
 80001d4:	f003 030c 	and.w	r3, r3, #12
 80001d8:	60fb      	str	r3, [r7, #12]
	pllClkSrc = RCC_GET_PLL_OSC_SOURCE();	//Identify the PLL Clock Source
 80001da:	4b77      	ldr	r3, [pc, #476]	; (80003b8 <RCC_OscillatorConfig+0x1f0>)
 80001dc:	685b      	ldr	r3, [r3, #4]
 80001de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80001e2:	60bb      	str	r3, [r7, #8]

	/********************* HSI Configuration *******************/
	if((RCC_OscInitStruct->oscillatorType & RCC_OSCILLATOR_TYPE_HSI) == RCC_OSCILLATOR_TYPE_HSI)
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	f003 0301 	and.w	r3, r3, #1
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d02d      	beq.n	800024c <RCC_OscillatorConfig+0x84>
	{
		//Check if HSI is used as system Clock source or as PLL Clock Source
		if(sysClkSrc == RCC_CFGR_SWS_HSI || ((sysClkSrc == RCC_CFGR_SWS_PLL) && (pllClkSrc == RCC_PLLCFGR_PLLSRC_HSI)))
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d005      	beq.n	8000202 <RCC_OscillatorConfig+0x3a>
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	2b08      	cmp	r3, #8
 80001fa:	d108      	bne.n	800020e <RCC_OscillatorConfig+0x46>
 80001fc:	68bb      	ldr	r3, [r7, #8]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d105      	bne.n	800020e <RCC_OscillatorConfig+0x46>
		{
			//Cannot turn of HSI Oscillator if it is used as system clock or PLL Clock Source
			if(RCC_OscInitStruct->hsiState == RCC_HSI_OFF)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	685b      	ldr	r3, [r3, #4]
 8000206:	2b00      	cmp	r3, #0
 8000208:	d120      	bne.n	800024c <RCC_OscillatorConfig+0x84>
			{
				return HAL_ERROR;
 800020a:	2301      	movs	r3, #1
 800020c:	e0cd      	b.n	80003aa <RCC_OscillatorConfig+0x1e2>
			}
		}
		else
		{
			// If the HSI State is ON
			if(RCC_OscInitStruct->hsiState != RCC_HSI_OFF)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	685b      	ldr	r3, [r3, #4]
 8000212:	2b00      	cmp	r3, #0
 8000214:	d00d      	beq.n	8000232 <RCC_OscillatorConfig+0x6a>
			{

				RCC_HSI_ENABLE();	//Enabling the HSI Clock
 8000216:	4b68      	ldr	r3, [pc, #416]	; (80003b8 <RCC_OscillatorConfig+0x1f0>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4a67      	ldr	r2, [pc, #412]	; (80003b8 <RCC_OscillatorConfig+0x1f0>)
 800021c:	f043 0301 	orr.w	r3, r3, #1
 8000220:	6013      	str	r3, [r2, #0]

				//Waiting for the HSI Ready Flag to be set
				while(READ_BIT(RCC->CR,RCC_CR_HSIRDY) == 0U);
 8000222:	bf00      	nop
 8000224:	4b64      	ldr	r3, [pc, #400]	; (80003b8 <RCC_OscillatorConfig+0x1f0>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	f003 0302 	and.w	r3, r3, #2
 800022c:	2b00      	cmp	r3, #0
 800022e:	d0f9      	beq.n	8000224 <RCC_OscillatorConfig+0x5c>
 8000230:	e00c      	b.n	800024c <RCC_OscillatorConfig+0x84>
			}
			else	//If the HSI state is OFF
			{
				RCC_HSI_DISABLE();	//Disable the HSI Clock
 8000232:	4b61      	ldr	r3, [pc, #388]	; (80003b8 <RCC_OscillatorConfig+0x1f0>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	4a60      	ldr	r2, [pc, #384]	; (80003b8 <RCC_OscillatorConfig+0x1f0>)
 8000238:	f023 0301 	bic.w	r3, r3, #1
 800023c:	6013      	str	r3, [r2, #0]

				//Wait for the HSI Ready Flag to be cleared
				while(READ_BIT(RCC->CR,RCC_CR_HSIRDY) != 0U);
 800023e:	bf00      	nop
 8000240:	4b5d      	ldr	r3, [pc, #372]	; (80003b8 <RCC_OscillatorConfig+0x1f0>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	f003 0302 	and.w	r3, r3, #2
 8000248:	2b00      	cmp	r3, #0
 800024a:	d1f9      	bne.n	8000240 <RCC_OscillatorConfig+0x78>
			}
		}
	}

	/********************* HSE Configuration ************************/
	if((RCC_OscInitStruct->oscillatorType & RCC_OSCILLATOR_TYPE_HSE) == RCC_OSCILLATOR_TYPE_HSE)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	f003 0302 	and.w	r3, r3, #2
 8000254:	2b00      	cmp	r3, #0
 8000256:	d048      	beq.n	80002ea <RCC_OscillatorConfig+0x122>
	{
		//Check if HSE is used as system Clock source or as PLL Clock Source
		if((sysClkSrc == RCC_CFGR_SWS_HSE) || ((sysClkSrc == RCC_CFGR_SWS_HSE) && (pllClkSrc == RCC_PLLCFGR_PLLSRC_HSE)))
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	2b04      	cmp	r3, #4
 800025c:	d006      	beq.n	800026c <RCC_OscillatorConfig+0xa4>
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	2b04      	cmp	r3, #4
 8000262:	d109      	bne.n	8000278 <RCC_OscillatorConfig+0xb0>
 8000264:	68bb      	ldr	r3, [r7, #8]
 8000266:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800026a:	d105      	bne.n	8000278 <RCC_OscillatorConfig+0xb0>
		{
			//Cannot turn of HSE Oscillator if it is used as system clock or PLL Clock Source
			if(RCC_OscInitStruct->hsiState == RCC_HSI_OFF)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	685b      	ldr	r3, [r3, #4]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d13a      	bne.n	80002ea <RCC_OscillatorConfig+0x122>
			{
				return HAL_ERROR;
 8000274:	2301      	movs	r3, #1
 8000276:	e098      	b.n	80003aa <RCC_OscillatorConfig+0x1e2>
			}
		}
		else
		{
			if(RCC_OscInitStruct->hseState == RCC_HSE_ON) //If HSE State is ON
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	689b      	ldr	r3, [r3, #8]
 800027c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000280:	d10d      	bne.n	800029e <RCC_OscillatorConfig+0xd6>
			{
				RCC_HSE_ENABLE();	//Enabling HSE
 8000282:	4b4d      	ldr	r3, [pc, #308]	; (80003b8 <RCC_OscillatorConfig+0x1f0>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a4c      	ldr	r2, [pc, #304]	; (80003b8 <RCC_OscillatorConfig+0x1f0>)
 8000288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800028c:	6013      	str	r3, [r2, #0]

				//Waiting for the HSE RDY Flag to be set
				while((READ_BIT(RCC->CR,RCC_CR_HSERDY)) == 0U);
 800028e:	bf00      	nop
 8000290:	4b49      	ldr	r3, [pc, #292]	; (80003b8 <RCC_OscillatorConfig+0x1f0>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000298:	2b00      	cmp	r3, #0
 800029a:	d0f9      	beq.n	8000290 <RCC_OscillatorConfig+0xc8>
 800029c:	e025      	b.n	80002ea <RCC_OscillatorConfig+0x122>
			}
			else if(RCC_OscInitStruct->hseState == RCC_HSE_BYPASS)	//If HSE State is Bypass
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	689b      	ldr	r3, [r3, #8]
 80002a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80002a6:	d113      	bne.n	80002d0 <RCC_OscillatorConfig+0x108>
			{
				SET_BIT(RCC->CR,RCC_CR_HSEBYP);
 80002a8:	4b43      	ldr	r3, [pc, #268]	; (80003b8 <RCC_OscillatorConfig+0x1f0>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a42      	ldr	r2, [pc, #264]	; (80003b8 <RCC_OscillatorConfig+0x1f0>)
 80002ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002b2:	6013      	str	r3, [r2, #0]
				RCC_HSE_ENABLE();	//Enabling HSE
 80002b4:	4b40      	ldr	r3, [pc, #256]	; (80003b8 <RCC_OscillatorConfig+0x1f0>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a3f      	ldr	r2, [pc, #252]	; (80003b8 <RCC_OscillatorConfig+0x1f0>)
 80002ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002be:	6013      	str	r3, [r2, #0]

				//Waiting for the HSE RDY Flag to be set
				while((READ_BIT(RCC->CR,RCC_CR_HSERDY)) == 0U);
 80002c0:	bf00      	nop
 80002c2:	4b3d      	ldr	r3, [pc, #244]	; (80003b8 <RCC_OscillatorConfig+0x1f0>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d0f9      	beq.n	80002c2 <RCC_OscillatorConfig+0xfa>
 80002ce:	e00c      	b.n	80002ea <RCC_OscillatorConfig+0x122>
			}
			else	//If HSE State is OF
			{
				RCC_HSE_DISABLE();
 80002d0:	4b39      	ldr	r3, [pc, #228]	; (80003b8 <RCC_OscillatorConfig+0x1f0>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a38      	ldr	r2, [pc, #224]	; (80003b8 <RCC_OscillatorConfig+0x1f0>)
 80002d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80002da:	6013      	str	r3, [r2, #0]

				//Waiting for the HSE RDY Flag to be Cleared
				while((READ_BIT(RCC->CR,RCC_CR_HSERDY)) != 0U);
 80002dc:	bf00      	nop
 80002de:	4b36      	ldr	r3, [pc, #216]	; (80003b8 <RCC_OscillatorConfig+0x1f0>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d1f9      	bne.n	80002de <RCC_OscillatorConfig+0x116>
			}
		}
	}

	/********************** PLL Configuration ************************/
	if((RCC_OscInitStruct->oscillatorType & RCC_OSCILLATOR_TYPE_PLL) == RCC_OSCILLATOR_TYPE_PLL)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	f003 0308 	and.w	r3, r3, #8
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d058      	beq.n	80003a8 <RCC_OscillatorConfig+0x1e0>
	{
		if(RCC_OscInitStruct->pll.pllState == RCC_PLL_ON)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	68db      	ldr	r3, [r3, #12]
 80002fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80002fe:	d140      	bne.n	8000382 <RCC_OscillatorConfig+0x1ba>
		{
			//Setting the PLL Clk Source
			if(RCC_OscInitStruct->pll.pllSource == RCC_PLL_SOURCE_HSI)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	691b      	ldr	r3, [r3, #16]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d104      	bne.n	8000312 <RCC_OscillatorConfig+0x14a>
			{
				CLEAR_BIT(RCC->PLLCFGR,RCC_PLLCFGR_PLLSRC_HSI);
 8000308:	4b2b      	ldr	r3, [pc, #172]	; (80003b8 <RCC_OscillatorConfig+0x1f0>)
 800030a:	4a2b      	ldr	r2, [pc, #172]	; (80003b8 <RCC_OscillatorConfig+0x1f0>)
 800030c:	685b      	ldr	r3, [r3, #4]
 800030e:	6053      	str	r3, [r2, #4]
 8000310:	e00a      	b.n	8000328 <RCC_OscillatorConfig+0x160>
			}
			else if(RCC_OscInitStruct->pll.pllSource == RCC_PLL_SOURCE_HSE)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	691b      	ldr	r3, [r3, #16]
 8000316:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800031a:	d105      	bne.n	8000328 <RCC_OscillatorConfig+0x160>
			{
				SET_BIT(RCC->PLLCFGR,RCC_PLLCFGR_PLLSRC_HSE);
 800031c:	4b26      	ldr	r3, [pc, #152]	; (80003b8 <RCC_OscillatorConfig+0x1f0>)
 800031e:	685b      	ldr	r3, [r3, #4]
 8000320:	4a25      	ldr	r2, [pc, #148]	; (80003b8 <RCC_OscillatorConfig+0x1f0>)
 8000322:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000326:	6053      	str	r3, [r2, #4]
			}

			//Configuring the PLLM Bit
			MODIFY_REG(RCC->PLLCFGR,RCC_PLLCFGR_PLLM_Msk,((RCC_OscInitStruct->pll.pllM) << RCC_PLLCFGR_PLLM_Pos));
 8000328:	4b23      	ldr	r3, [pc, #140]	; (80003b8 <RCC_OscillatorConfig+0x1f0>)
 800032a:	685b      	ldr	r3, [r3, #4]
 800032c:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	695b      	ldr	r3, [r3, #20]
 8000334:	4920      	ldr	r1, [pc, #128]	; (80003b8 <RCC_OscillatorConfig+0x1f0>)
 8000336:	4313      	orrs	r3, r2
 8000338:	604b      	str	r3, [r1, #4]

			//Configuring the PLLN Bit
			MODIFY_REG(RCC->PLLCFGR,RCC_PLLCFGR_PLLN_Msk,((RCC_OscInitStruct->pll.pllN) << RCC_PLLCFGR_PLLN_Pos));
 800033a:	4b1f      	ldr	r3, [pc, #124]	; (80003b8 <RCC_OscillatorConfig+0x1f0>)
 800033c:	685b      	ldr	r3, [r3, #4]
 800033e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	6992      	ldr	r2, [r2, #24]
 800034a:	0192      	lsls	r2, r2, #6
 800034c:	491a      	ldr	r1, [pc, #104]	; (80003b8 <RCC_OscillatorConfig+0x1f0>)
 800034e:	4313      	orrs	r3, r2
 8000350:	604b      	str	r3, [r1, #4]

			//Configuring the PLLP Bit
			MODIFY_REG(RCC->PLLCFGR,RCC_PLLCFGR_PLLP_Msk,((RCC_OscInitStruct->pll.pllP) << RCC_PLLCFGR_PLLP_Pos));
 8000352:	4b19      	ldr	r3, [pc, #100]	; (80003b8 <RCC_OscillatorConfig+0x1f0>)
 8000354:	685b      	ldr	r3, [r3, #4]
 8000356:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	69db      	ldr	r3, [r3, #28]
 800035e:	041b      	lsls	r3, r3, #16
 8000360:	4915      	ldr	r1, [pc, #84]	; (80003b8 <RCC_OscillatorConfig+0x1f0>)
 8000362:	4313      	orrs	r3, r2
 8000364:	604b      	str	r3, [r1, #4]

			//Enabling the PLL Clock
			RCC_PLL_ENABLE();
 8000366:	4b14      	ldr	r3, [pc, #80]	; (80003b8 <RCC_OscillatorConfig+0x1f0>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a13      	ldr	r2, [pc, #76]	; (80003b8 <RCC_OscillatorConfig+0x1f0>)
 800036c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000370:	6013      	str	r3, [r2, #0]

			//Waiting for the PLL RDY Flag to be set
			while((READ_BIT(RCC->CR,RCC_CR_PLLRDY)) == 0U);
 8000372:	bf00      	nop
 8000374:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <RCC_OscillatorConfig+0x1f0>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0f9      	beq.n	8000374 <RCC_OscillatorConfig+0x1ac>
 8000380:	e012      	b.n	80003a8 <RCC_OscillatorConfig+0x1e0>
		}
		else
		{
			if(sysClkSrc != RCC_CFGR_SWS_PLL)
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	2b08      	cmp	r3, #8
 8000386:	d00d      	beq.n	80003a4 <RCC_OscillatorConfig+0x1dc>
			{
				//Disabling the PLL
				RCC_PLL_DISABLE();
 8000388:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <RCC_OscillatorConfig+0x1f0>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a0a      	ldr	r2, [pc, #40]	; (80003b8 <RCC_OscillatorConfig+0x1f0>)
 800038e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000392:	6013      	str	r3, [r2, #0]

				//Waiting for the PLL RDY Flag to be cleared
				while((READ_BIT(RCC->CR,RCC_CR_PLLRDY)) != 0U);
 8000394:	bf00      	nop
 8000396:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <RCC_OscillatorConfig+0x1f0>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d1f9      	bne.n	8000396 <RCC_OscillatorConfig+0x1ce>
 80003a2:	e001      	b.n	80003a8 <RCC_OscillatorConfig+0x1e0>
			}
			else
			{
				return HAL_ERROR;
 80003a4:	2301      	movs	r3, #1
 80003a6:	e000      	b.n	80003aa <RCC_OscillatorConfig+0x1e2>
			}

		}
	}
	return HAL_OK;
 80003a8:	2300      	movs	r3, #0
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	3714      	adds	r7, #20
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	40023800 	.word	0x40023800

080003bc <RCC_ClockConfig>:
 *
 * RETURN		:	Status_t - Return HAL_OK, HAL_ERROR to help debug problems
 *
 * **************************************************************************/
Status_t RCC_ClockConfig(RCC_ClkInit_t *RCC_ClkInitStruct, uint32_t flashLatency)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	6039      	str	r1, [r7, #0]

	/******************* Flash Config ****************************/
	//If you are increasing the CPU Frequency
	if(flashLatency > FLASH_GET_LATENCY())
 80003c6:	4b5d      	ldr	r3, [pc, #372]	; (800053c <RCC_ClockConfig+0x180>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f003 0307 	and.w	r3, r3, #7
 80003ce:	683a      	ldr	r2, [r7, #0]
 80003d0:	429a      	cmp	r2, r3
 80003d2:	d910      	bls.n	80003f6 <RCC_ClockConfig+0x3a>
	{
		//Set the new latency value
		FLASH_SET_LATENCY(flashLatency);
 80003d4:	4b59      	ldr	r3, [pc, #356]	; (800053c <RCC_ClockConfig+0x180>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	f023 0207 	bic.w	r2, r3, #7
 80003dc:	4957      	ldr	r1, [pc, #348]	; (800053c <RCC_ClockConfig+0x180>)
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	4313      	orrs	r3, r2
 80003e2:	600b      	str	r3, [r1, #0]

		//Check if the Latency value has been changed or not
		if(FLASH_GET_LATENCY() != flashLatency)
 80003e4:	4b55      	ldr	r3, [pc, #340]	; (800053c <RCC_ClockConfig+0x180>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	f003 0307 	and.w	r3, r3, #7
 80003ec:	683a      	ldr	r2, [r7, #0]
 80003ee:	429a      	cmp	r2, r3
 80003f0:	d001      	beq.n	80003f6 <RCC_ClockConfig+0x3a>
		{
			return HAL_ERROR;
 80003f2:	2301      	movs	r3, #1
 80003f4:	e09c      	b.n	8000530 <RCC_ClockConfig+0x174>
		}
	}

	/******************* System Clock Config ***********************/
	if((RCC_ClkInitStruct->clockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d050      	beq.n	80004a4 <RCC_ClockConfig+0xe8>
	{
		//If SYSCLOCK is HSI
		if(RCC_ClkInitStruct->sysClkSource == RCC_SYSCLKSOURCE_HSI)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	685b      	ldr	r3, [r3, #4]
 8000406:	2b00      	cmp	r3, #0
 8000408:	d115      	bne.n	8000436 <RCC_ClockConfig+0x7a>
		{
			//Checking if HSI is ready or not
			if(READ_BIT(RCC->CR,RCC_CR_HSIRDY) == 0U)
 800040a:	4b4d      	ldr	r3, [pc, #308]	; (8000540 <RCC_ClockConfig+0x184>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f003 0302 	and.w	r3, r3, #2
 8000412:	2b00      	cmp	r3, #0
 8000414:	d101      	bne.n	800041a <RCC_ClockConfig+0x5e>
			{
				return HAL_ERROR; //Return error if HSI is not ready
 8000416:	2301      	movs	r3, #1
 8000418:	e08a      	b.n	8000530 <RCC_ClockConfig+0x174>
			}
			else
			{
				MODIFY_REG(RCC->CFGR,RCC_CFGR_SW,RCC_SYSCLKSOURCE_HSI); //Change Clock to HSI
 800041a:	4b49      	ldr	r3, [pc, #292]	; (8000540 <RCC_ClockConfig+0x184>)
 800041c:	689b      	ldr	r3, [r3, #8]
 800041e:	4a48      	ldr	r2, [pc, #288]	; (8000540 <RCC_ClockConfig+0x184>)
 8000420:	f023 0303 	bic.w	r3, r3, #3
 8000424:	6093      	str	r3, [r2, #8]
			}

			//Wait until the System Clock Changes to HSI
			while(RCC_GET_SYSCLK_SRC() != RCC_CFGR_SWS_HSI);
 8000426:	bf00      	nop
 8000428:	4b45      	ldr	r3, [pc, #276]	; (8000540 <RCC_ClockConfig+0x184>)
 800042a:	689b      	ldr	r3, [r3, #8]
 800042c:	f003 030c 	and.w	r3, r3, #12
 8000430:	2b00      	cmp	r3, #0
 8000432:	d1f9      	bne.n	8000428 <RCC_ClockConfig+0x6c>
 8000434:	e036      	b.n	80004a4 <RCC_ClockConfig+0xe8>
		}
		else if(RCC_ClkInitStruct->sysClkSource == RCC_SYSCLKSOURCE_HSE)	//If SYSCLOCK is HSE
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	685b      	ldr	r3, [r3, #4]
 800043a:	2b01      	cmp	r3, #1
 800043c:	d117      	bne.n	800046e <RCC_ClockConfig+0xb2>
		{
			//Checking if HSE is ready or not
			if(READ_BIT(RCC->CR,RCC_CR_HSERDY) == 0U)
 800043e:	4b40      	ldr	r3, [pc, #256]	; (8000540 <RCC_ClockConfig+0x184>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000446:	2b00      	cmp	r3, #0
 8000448:	d101      	bne.n	800044e <RCC_ClockConfig+0x92>
			{
				return HAL_ERROR;	//Return error if HSE is not ready
 800044a:	2301      	movs	r3, #1
 800044c:	e070      	b.n	8000530 <RCC_ClockConfig+0x174>
			}
			else
			{
				MODIFY_REG(RCC->CFGR,RCC_CFGR_SW,RCC_SYSCLKSOURCE_HSE); //Change Clock to HSE
 800044e:	4b3c      	ldr	r3, [pc, #240]	; (8000540 <RCC_ClockConfig+0x184>)
 8000450:	689b      	ldr	r3, [r3, #8]
 8000452:	f023 0303 	bic.w	r3, r3, #3
 8000456:	4a3a      	ldr	r2, [pc, #232]	; (8000540 <RCC_ClockConfig+0x184>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	6093      	str	r3, [r2, #8]
			}

			//Wait until the System Clock Changes to HSE
			while(RCC_GET_SYSCLK_SRC() != RCC_CFGR_SWS_HSE);
 800045e:	bf00      	nop
 8000460:	4b37      	ldr	r3, [pc, #220]	; (8000540 <RCC_ClockConfig+0x184>)
 8000462:	689b      	ldr	r3, [r3, #8]
 8000464:	f003 030c 	and.w	r3, r3, #12
 8000468:	2b04      	cmp	r3, #4
 800046a:	d1f9      	bne.n	8000460 <RCC_ClockConfig+0xa4>
 800046c:	e01a      	b.n	80004a4 <RCC_ClockConfig+0xe8>
		}
		else if(RCC_ClkInitStruct->sysClkSource == RCC_SYSCLKSOURCE_PLL)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	2b02      	cmp	r3, #2
 8000474:	d116      	bne.n	80004a4 <RCC_ClockConfig+0xe8>
		{
			//Checking if PLL is ready or not
			if(READ_BIT(RCC->CR,RCC_CR_PLLRDY) == 0U)
 8000476:	4b32      	ldr	r3, [pc, #200]	; (8000540 <RCC_ClockConfig+0x184>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800047e:	2b00      	cmp	r3, #0
 8000480:	d101      	bne.n	8000486 <RCC_ClockConfig+0xca>
			{
				return HAL_ERROR;	//Return error if PLL is not ready
 8000482:	2301      	movs	r3, #1
 8000484:	e054      	b.n	8000530 <RCC_ClockConfig+0x174>
			}
			else
			{
				MODIFY_REG(RCC->CFGR,RCC_CFGR_SW,RCC_SYSCLKSOURCE_PLL);	//Change Clock source to PLL
 8000486:	4b2e      	ldr	r3, [pc, #184]	; (8000540 <RCC_ClockConfig+0x184>)
 8000488:	689b      	ldr	r3, [r3, #8]
 800048a:	f023 0303 	bic.w	r3, r3, #3
 800048e:	4a2c      	ldr	r2, [pc, #176]	; (8000540 <RCC_ClockConfig+0x184>)
 8000490:	f043 0302 	orr.w	r3, r3, #2
 8000494:	6093      	str	r3, [r2, #8]
			}

			//Wait until the System Clock Changes to PLL
			while(RCC_GET_SYSCLK_SRC() != RCC_CFGR_SWS_PLL);
 8000496:	bf00      	nop
 8000498:	4b29      	ldr	r3, [pc, #164]	; (8000540 <RCC_ClockConfig+0x184>)
 800049a:	689b      	ldr	r3, [r3, #8]
 800049c:	f003 030c 	and.w	r3, r3, #12
 80004a0:	2b08      	cmp	r3, #8
 80004a2:	d1f9      	bne.n	8000498 <RCC_ClockConfig+0xdc>
		}
	}

	/******************* Flash Config ****************************/
	//If you are decreasing the CPU Frequency
	if(flashLatency < FLASH_GET_LATENCY())
 80004a4:	4b25      	ldr	r3, [pc, #148]	; (800053c <RCC_ClockConfig+0x180>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	f003 0307 	and.w	r3, r3, #7
 80004ac:	683a      	ldr	r2, [r7, #0]
 80004ae:	429a      	cmp	r2, r3
 80004b0:	d210      	bcs.n	80004d4 <RCC_ClockConfig+0x118>
	{
		//Set the new latency value
		FLASH_SET_LATENCY(flashLatency);
 80004b2:	4b22      	ldr	r3, [pc, #136]	; (800053c <RCC_ClockConfig+0x180>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f023 0207 	bic.w	r2, r3, #7
 80004ba:	4920      	ldr	r1, [pc, #128]	; (800053c <RCC_ClockConfig+0x180>)
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	4313      	orrs	r3, r2
 80004c0:	600b      	str	r3, [r1, #0]

		//Check if the Latency value has been changed or not
		if(FLASH_GET_LATENCY() != flashLatency)
 80004c2:	4b1e      	ldr	r3, [pc, #120]	; (800053c <RCC_ClockConfig+0x180>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f003 0307 	and.w	r3, r3, #7
 80004ca:	683a      	ldr	r2, [r7, #0]
 80004cc:	429a      	cmp	r2, r3
 80004ce:	d001      	beq.n	80004d4 <RCC_ClockConfig+0x118>
		{
			return HAL_ERROR;
 80004d0:	2301      	movs	r3, #1
 80004d2:	e02d      	b.n	8000530 <RCC_ClockConfig+0x174>
		}
	}

	/******************* AHB(HCLK) Clock Config ***********************/
	if((RCC_ClkInitStruct->clockType & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	f003 0302 	and.w	r3, r3, #2
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d008      	beq.n	80004f2 <RCC_ClockConfig+0x136>
	{
		MODIFY_REG(RCC->CFGR,RCC_CFGR_HPRE,RCC_ClkInitStruct->ahbClkDivider);
 80004e0:	4b17      	ldr	r3, [pc, #92]	; (8000540 <RCC_ClockConfig+0x184>)
 80004e2:	689b      	ldr	r3, [r3, #8]
 80004e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	689b      	ldr	r3, [r3, #8]
 80004ec:	4914      	ldr	r1, [pc, #80]	; (8000540 <RCC_ClockConfig+0x184>)
 80004ee:	4313      	orrs	r3, r2
 80004f0:	608b      	str	r3, [r1, #8]
	}

	/****************** APB1(PCLK1) Clock Config **********************/
	if((RCC_ClkInitStruct->clockType & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f003 0304 	and.w	r3, r3, #4
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d008      	beq.n	8000510 <RCC_ClockConfig+0x154>
	{
		MODIFY_REG(RCC->CFGR,RCC_CFGR_PPRE1,RCC_ClkInitStruct->apb1ClkDivider);
 80004fe:	4b10      	ldr	r3, [pc, #64]	; (8000540 <RCC_ClockConfig+0x184>)
 8000500:	689b      	ldr	r3, [r3, #8]
 8000502:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	68db      	ldr	r3, [r3, #12]
 800050a:	490d      	ldr	r1, [pc, #52]	; (8000540 <RCC_ClockConfig+0x184>)
 800050c:	4313      	orrs	r3, r2
 800050e:	608b      	str	r3, [r1, #8]
	}

	/****************** APB2(PCLK2) Clock Config **********************/
	if((RCC_ClkInitStruct->clockType & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f003 0308 	and.w	r3, r3, #8
 8000518:	2b00      	cmp	r3, #0
 800051a:	d008      	beq.n	800052e <RCC_ClockConfig+0x172>
	{
		MODIFY_REG(RCC->CFGR,RCC_CFGR_PPRE2,RCC_ClkInitStruct->apb2ClkDivider);
 800051c:	4b08      	ldr	r3, [pc, #32]	; (8000540 <RCC_ClockConfig+0x184>)
 800051e:	689b      	ldr	r3, [r3, #8]
 8000520:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	691b      	ldr	r3, [r3, #16]
 8000528:	4905      	ldr	r1, [pc, #20]	; (8000540 <RCC_ClockConfig+0x184>)
 800052a:	4313      	orrs	r3, r2
 800052c:	608b      	str	r3, [r1, #8]
	}

	return HAL_OK;
 800052e:	2300      	movs	r3, #0
}
 8000530:	4618      	mov	r0, r3
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr
 800053c:	40023c00 	.word	0x40023c00
 8000540:	40023800 	.word	0x40023800

08000544 <RCC_GetSysClockFreq>:
 *
 * RETURN		:	returns the system Clock Frequency
 *
 * **************************************************************************/
uint32_t RCC_GetSysClockFreq(void)
{
 8000544:	b480      	push	{r7}
 8000546:	b089      	sub	sp, #36	; 0x24
 8000548:	af00      	add	r7, sp, #0
	uint32_t sysclkfeq = 0U;
 800054a:	2300      	movs	r3, #0
 800054c:	61fb      	str	r3, [r7, #28]
	uint32_t sysClkSrc, pllClkSrc;
	uint32_t pllvco, plln, pllp, pllm;

	sysClkSrc = RCC_GET_SYSCLK_SRC();		//Identify the System Clock Source
 800054e:	4b3d      	ldr	r3, [pc, #244]	; (8000644 <RCC_GetSysClockFreq+0x100>)
 8000550:	689b      	ldr	r3, [r3, #8]
 8000552:	f003 030c 	and.w	r3, r3, #12
 8000556:	61bb      	str	r3, [r7, #24]
	pllClkSrc = RCC_GET_PLL_OSC_SOURCE();	//Identify the PLL Clock Source
 8000558:	4b3a      	ldr	r3, [pc, #232]	; (8000644 <RCC_GetSysClockFreq+0x100>)
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000560:	617b      	str	r3, [r7, #20]

	if(sysClkSrc == RCC_CFGR_SWS_HSI)	//If System clock is HSI
 8000562:	69bb      	ldr	r3, [r7, #24]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d101      	bne.n	800056c <RCC_GetSysClockFreq+0x28>
	{
		return HSI_FREQ;
 8000568:	4b37      	ldr	r3, [pc, #220]	; (8000648 <RCC_GetSysClockFreq+0x104>)
 800056a:	e065      	b.n	8000638 <RCC_GetSysClockFreq+0xf4>
	}
	else if(sysClkSrc == RCC_CFGR_SWS_HSE)	//If System Clock is HSE
 800056c:	69bb      	ldr	r3, [r7, #24]
 800056e:	2b04      	cmp	r3, #4
 8000570:	d101      	bne.n	8000576 <RCC_GetSysClockFreq+0x32>
	{
		return HSE_FREQ;
 8000572:	4b36      	ldr	r3, [pc, #216]	; (800064c <RCC_GetSysClockFreq+0x108>)
 8000574:	e060      	b.n	8000638 <RCC_GetSysClockFreq+0xf4>
	}
	else if(sysClkSrc == RCC_CFGR_SWS_PLL)	//If System Clock is PLL
 8000576:	69bb      	ldr	r3, [r7, #24]
 8000578:	2b08      	cmp	r3, #8
 800057a:	d15c      	bne.n	8000636 <RCC_GetSysClockFreq+0xf2>
	{
		/* PLL_VCO = (HSE_VALUE or HSI_VALUE) * PLLN / PLLM
		   SYSCLK = PLL_VCO / PLLR
		*/

		if(pllClkSrc == RCC_PLLCFGR_PLLSRC_HSI)	//If HSI is Clock Source
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d11e      	bne.n	80005c0 <RCC_GetSysClockFreq+0x7c>
		{
			pllm = ((READ_BIT(RCC->PLLCFGR,RCC_PLLCFGR_PLLM)) >> RCC_PLLCFGR_PLLM_Pos);
 8000582:	4b30      	ldr	r3, [pc, #192]	; (8000644 <RCC_GetSysClockFreq+0x100>)
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800058a:	613b      	str	r3, [r7, #16]
			plln = ((READ_BIT(RCC->PLLCFGR,RCC_PLLCFGR_PLLN)) >> RCC_PLLCFGR_PLLN_Pos);
 800058c:	4b2d      	ldr	r3, [pc, #180]	; (8000644 <RCC_GetSysClockFreq+0x100>)
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	099b      	lsrs	r3, r3, #6
 8000592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000596:	60fb      	str	r3, [r7, #12]

			pllvco = ((HSI_FREQ) * (plln/pllm));
 8000598:	68fa      	ldr	r2, [r7, #12]
 800059a:	693b      	ldr	r3, [r7, #16]
 800059c:	fbb2 f3f3 	udiv	r3, r2, r3
 80005a0:	4a29      	ldr	r2, [pc, #164]	; (8000648 <RCC_GetSysClockFreq+0x104>)
 80005a2:	fb02 f303 	mul.w	r3, r2, r3
 80005a6:	60bb      	str	r3, [r7, #8]

			pllp = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos));
 80005a8:	4b26      	ldr	r3, [pc, #152]	; (8000644 <RCC_GetSysClockFreq+0x100>)
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	0c1b      	lsrs	r3, r3, #16
 80005ae:	f003 0303 	and.w	r3, r3, #3
 80005b2:	607b      	str	r3, [r7, #4]

			sysclkfeq = pllvco / pllp;
 80005b4:	68ba      	ldr	r2, [r7, #8]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80005bc:	61fb      	str	r3, [r7, #28]
 80005be:	e03a      	b.n	8000636 <RCC_GetSysClockFreq+0xf2>
		}
		else	//If HSE is Clock Source
		{
			pllm = ((READ_BIT(RCC->PLLCFGR,RCC_PLLCFGR_PLLM)) >> RCC_PLLCFGR_PLLM_Pos);
 80005c0:	4b20      	ldr	r3, [pc, #128]	; (8000644 <RCC_GetSysClockFreq+0x100>)
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80005c8:	613b      	str	r3, [r7, #16]
			plln = ((READ_BIT(RCC->PLLCFGR,RCC_PLLCFGR_PLLN)) >> RCC_PLLCFGR_PLLN_Pos);
 80005ca:	4b1e      	ldr	r3, [pc, #120]	; (8000644 <RCC_GetSysClockFreq+0x100>)
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	099b      	lsrs	r3, r3, #6
 80005d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80005d4:	60fb      	str	r3, [r7, #12]

			pllvco = ((HSE_FREQ) * (plln/pllm));
 80005d6:	68fa      	ldr	r2, [r7, #12]
 80005d8:	693b      	ldr	r3, [r7, #16]
 80005da:	fbb2 f3f3 	udiv	r3, r2, r3
 80005de:	4a1b      	ldr	r2, [pc, #108]	; (800064c <RCC_GetSysClockFreq+0x108>)
 80005e0:	fb02 f303 	mul.w	r3, r2, r3
 80005e4:	60bb      	str	r3, [r7, #8]

			pllp = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos));
 80005e6:	4b17      	ldr	r3, [pc, #92]	; (8000644 <RCC_GetSysClockFreq+0x100>)
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	0c1b      	lsrs	r3, r3, #16
 80005ec:	f003 0303 	and.w	r3, r3, #3
 80005f0:	607b      	str	r3, [r7, #4]

			switch(pllp)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b03      	cmp	r3, #3
 80005f6:	d81e      	bhi.n	8000636 <RCC_GetSysClockFreq+0xf2>
 80005f8:	a201      	add	r2, pc, #4	; (adr r2, 8000600 <RCC_GetSysClockFreq+0xbc>)
 80005fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005fe:	bf00      	nop
 8000600:	08000611 	.word	0x08000611
 8000604:	08000619 	.word	0x08000619
 8000608:	08000621 	.word	0x08000621
 800060c:	0800062f 	.word	0x0800062f
			{
				case RCC_PLLP_DIV2 : sysclkfeq = pllvco / 2; break;
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	085b      	lsrs	r3, r3, #1
 8000614:	61fb      	str	r3, [r7, #28]
 8000616:	e00e      	b.n	8000636 <RCC_GetSysClockFreq+0xf2>
				case RCC_PLLP_DIV4 : sysclkfeq = pllvco / 4; break;
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	089b      	lsrs	r3, r3, #2
 800061c:	61fb      	str	r3, [r7, #28]
 800061e:	e00a      	b.n	8000636 <RCC_GetSysClockFreq+0xf2>
				case RCC_PLLP_DIV6 : sysclkfeq = pllvco / 6; break;
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	4a0b      	ldr	r2, [pc, #44]	; (8000650 <RCC_GetSysClockFreq+0x10c>)
 8000624:	fba2 2303 	umull	r2, r3, r2, r3
 8000628:	089b      	lsrs	r3, r3, #2
 800062a:	61fb      	str	r3, [r7, #28]
 800062c:	e003      	b.n	8000636 <RCC_GetSysClockFreq+0xf2>
				case RCC_PLLP_DIV8 : sysclkfeq = pllvco / 8; break;
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	08db      	lsrs	r3, r3, #3
 8000632:	61fb      	str	r3, [r7, #28]
 8000634:	bf00      	nop
			}
		}
	}
	return sysclkfeq;
 8000636:	69fb      	ldr	r3, [r7, #28]
}
 8000638:	4618      	mov	r0, r3
 800063a:	3724      	adds	r7, #36	; 0x24
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	40023800 	.word	0x40023800
 8000648:	00f42400 	.word	0x00f42400
 800064c:	007a1200 	.word	0x007a1200
 8000650:	aaaaaaab 	.word	0xaaaaaaab

08000654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	2b00      	cmp	r3, #0
 8000664:	db0b      	blt.n	800067e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f003 021f 	and.w	r2, r3, #31
 800066c:	4907      	ldr	r1, [pc, #28]	; (800068c <__NVIC_EnableIRQ+0x38>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	095b      	lsrs	r3, r3, #5
 8000674:	2001      	movs	r0, #1
 8000676:	fa00 f202 	lsl.w	r2, r0, r2
 800067a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000e100 	.word	0xe000e100

08000690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db0a      	blt.n	80006ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	490c      	ldr	r1, [pc, #48]	; (80006dc <__NVIC_SetPriority+0x4c>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	0112      	lsls	r2, r2, #4
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b8:	e00a      	b.n	80006d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4908      	ldr	r1, [pc, #32]	; (80006e0 <__NVIC_SetPriority+0x50>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	3b04      	subs	r3, #4
 80006c8:	0112      	lsls	r2, r2, #4
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	440b      	add	r3, r1
 80006ce:	761a      	strb	r2, [r3, #24]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000e100 	.word	0xe000e100
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <systickInit>:
 *
 * RETURN		:	void
 *
 * **************************************************************************/
void systickInit(void)
{
 80006e4:	b5b0      	push	{r4, r5, r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
	uint32_t sysClkFreq = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
	uint64_t reloadValue = 0;
 80006ee:	f04f 0200 	mov.w	r2, #0
 80006f2:	f04f 0300 	mov.w	r3, #0
 80006f6:	e9c7 2300 	strd	r2, r3, [r7]

	sysClkFreq = RCC_GetSysClockFreq();
 80006fa:	f7ff ff23 	bl	8000544 <RCC_GetSysClockFreq>
 80006fe:	60f8      	str	r0, [r7, #12]

	//reloadValue = System Clock / 1000 for 1 ms Delay
	reloadValue = (sysClkFreq / 1000) - 1;
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	4a18      	ldr	r2, [pc, #96]	; (8000764 <systickInit+0x80>)
 8000704:	fba2 2303 	umull	r2, r3, r2, r3
 8000708:	099b      	lsrs	r3, r3, #6
 800070a:	3b01      	subs	r3, #1
 800070c:	2200      	movs	r2, #0
 800070e:	461c      	mov	r4, r3
 8000710:	4615      	mov	r5, r2
 8000712:	e9c7 4500 	strd	r4, r5, [r7]

	//Setting the Reload Value of Systick
	MODIFY_REG(SysTick->LOAD, SysTick_LOAD_RELOAD_Msk, reloadValue);
 8000716:	4b14      	ldr	r3, [pc, #80]	; (8000768 <systickInit+0x84>)
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	4911      	ldr	r1, [pc, #68]	; (8000768 <systickInit+0x84>)
 8000722:	4313      	orrs	r3, r2
 8000724:	604b      	str	r3, [r1, #4]

	//Selecting the clock source of systick
	SET_BIT(SysTick->CTRL,SysTick_CTRL_CLKSOURCE_Msk);
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <systickInit+0x84>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a0f      	ldr	r2, [pc, #60]	; (8000768 <systickInit+0x84>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	6013      	str	r3, [r2, #0]

	//Enabling the Systick exceptions
	SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <systickInit+0x84>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a0c      	ldr	r2, [pc, #48]	; (8000768 <systickInit+0x84>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	6013      	str	r3, [r2, #0]

	//Setting the Interrupt Priority
	NVIC_SetPriority(SysTick_IRQn,0);
 800073e:	2100      	movs	r1, #0
 8000740:	f04f 30ff 	mov.w	r0, #4294967295
 8000744:	f7ff ffa4 	bl	8000690 <__NVIC_SetPriority>

	//Enabling the Interrupt
	NVIC_EnableIRQ(SysTick_IRQn);
 8000748:	f04f 30ff 	mov.w	r0, #4294967295
 800074c:	f7ff ff82 	bl	8000654 <__NVIC_EnableIRQ>

	//Enabling the systick
	SET_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Msk);
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <systickInit+0x84>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a04      	ldr	r2, [pc, #16]	; (8000768 <systickInit+0x84>)
 8000756:	f043 0301 	orr.w	r3, r3, #1
 800075a:	6013      	str	r3, [r2, #0]
}
 800075c:	bf00      	nop
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bdb0      	pop	{r4, r5, r7, pc}
 8000764:	10624dd3 	.word	0x10624dd3
 8000768:	e000e010 	.word	0xe000e010

0800076c <SysTick_Handler>:
 *
 * RETURN		:	void
 *
 * **************************************************************************/
void SysTick_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
	current_ticks++;	//Incrementing ms variable every 1 ms
 8000770:	4b04      	ldr	r3, [pc, #16]	; (8000784 <SysTick_Handler+0x18>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	3301      	adds	r3, #1
 8000776:	4a03      	ldr	r2, [pc, #12]	; (8000784 <SysTick_Handler+0x18>)
 8000778:	6013      	str	r3, [r2, #0]
}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	2000001c 	.word	0x2000001c

08000788 <ErrorHandler>:
 *
 * RETURN		:	void
 *
 * **************************************************************************/
void ErrorHandler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0

}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <main>:
#include "main.h"

void systemClockConfig(void);

int main(void)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	af00      	add	r7, sp, #0
	systemClockConfig();
 800079a:	f000 f803 	bl	80007a4 <systemClockConfig>

	systickInit();
 800079e:	f7ff ffa1 	bl	80006e4 <systickInit>

	while(1)
 80007a2:	e7fe      	b.n	80007a2 <main+0xc>

080007a4 <systemClockConfig>:

	}
}

void systemClockConfig(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08e      	sub	sp, #56	; 0x38
 80007a8:	af00      	add	r7, sp, #0
	 * AHB Clock Speed = 168Mhz
	 * APB1 Clock Speed = 42Mhz
	 * APB2 Clock Speed = 84Mhz
	 */

	RCC_OscInit_t RCC_OscInitStruct = {0};
 80007aa:	f107 0318 	add.w	r3, r7, #24
 80007ae:	2220      	movs	r2, #32
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 f865 	bl	8000882 <memset>

	RCC_OscInitStruct.oscillatorType = RCC_OSCILLATOR_TYPE_HSE | RCC_OSCILLATOR_TYPE_PLL;
 80007b8:	230a      	movs	r3, #10
 80007ba:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.hseState = RCC_HSE_ON;
 80007bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c0:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.pll.pllSource = RCC_PLL_SOURCE_HSE;
 80007c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007c6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.pll.pllState = RCC_PLL_ON;
 80007c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.pll.pllM = 8U;
 80007ce:	2308      	movs	r3, #8
 80007d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.pll.pllN = 336U;
 80007d2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007d6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.pll.pllP = RCC_PLLP_DIV2;
 80007d8:	2300      	movs	r3, #0
 80007da:	637b      	str	r3, [r7, #52]	; 0x34

	if(RCC_OscillatorConfig(&RCC_OscInitStruct) != HAL_OK)
 80007dc:	f107 0318 	add.w	r3, r7, #24
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fcf1 	bl	80001c8 <RCC_OscillatorConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <systemClockConfig+0x4c>
	{
		ErrorHandler();
 80007ec:	f7ff ffcc 	bl	8000788 <ErrorHandler>
	}

	RCC_ClkInit_t RCC_ClkInitStruct = {0};
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]

	RCC_ClkInitStruct.clockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80007fe:	230d      	movs	r3, #13
 8000800:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.sysClkSource = RCC_SYSCLKSOURCE_PLL;
 8000802:	2302      	movs	r3, #2
 8000804:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.apb1ClkDivider = RCC_CFGR_PPRE1_DIV4;
 8000806:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800080a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.apb2ClkDivider = RCC_CFGR_PPRE2_DIV2;
 800080c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000810:	617b      	str	r3, [r7, #20]

	if(RCC_ClockConfig(&RCC_ClkInitStruct,FLASH_ACR_LATENCY_5WS) != HAL_OK)
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2105      	movs	r1, #5
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fdd0 	bl	80003bc <RCC_ClockConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <systemClockConfig+0x82>
	{
		ErrorHandler();
 8000822:	f7ff ffb1 	bl	8000788 <ErrorHandler>
	}
}
 8000826:	bf00      	nop
 8000828:	3738      	adds	r7, #56	; 0x38
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000830:	480d      	ldr	r0, [pc, #52]	; (8000868 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000832:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000834:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000838:	480c      	ldr	r0, [pc, #48]	; (800086c <LoopForever+0x6>)
  ldr r1, =_edata
 800083a:	490d      	ldr	r1, [pc, #52]	; (8000870 <LoopForever+0xa>)
  ldr r2, =_sidata
 800083c:	4a0d      	ldr	r2, [pc, #52]	; (8000874 <LoopForever+0xe>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000840:	e002      	b.n	8000848 <LoopCopyDataInit>

08000842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000846:	3304      	adds	r3, #4

08000848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800084c:	d3f9      	bcc.n	8000842 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800084e:	4a0a      	ldr	r2, [pc, #40]	; (8000878 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000850:	4c0a      	ldr	r4, [pc, #40]	; (800087c <LoopForever+0x16>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000854:	e001      	b.n	800085a <LoopFillZerobss>

08000856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000858:	3204      	adds	r2, #4

0800085a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800085c:	d3fb      	bcc.n	8000856 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800085e:	f000 f819 	bl	8000894 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000862:	f7ff ff98 	bl	8000796 <main>

08000866 <LoopForever>:

LoopForever:
  b LoopForever
 8000866:	e7fe      	b.n	8000866 <LoopForever>
  ldr   r0, =_estack
 8000868:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800086c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000870:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000874:	080008fc 	.word	0x080008fc
  ldr r2, =_sbss
 8000878:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800087c:	20000020 	.word	0x20000020

08000880 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000880:	e7fe      	b.n	8000880 <ADC_IRQHandler>

08000882 <memset>:
 8000882:	4402      	add	r2, r0
 8000884:	4603      	mov	r3, r0
 8000886:	4293      	cmp	r3, r2
 8000888:	d100      	bne.n	800088c <memset+0xa>
 800088a:	4770      	bx	lr
 800088c:	f803 1b01 	strb.w	r1, [r3], #1
 8000890:	e7f9      	b.n	8000886 <memset+0x4>
	...

08000894 <__libc_init_array>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	4d0d      	ldr	r5, [pc, #52]	; (80008cc <__libc_init_array+0x38>)
 8000898:	4c0d      	ldr	r4, [pc, #52]	; (80008d0 <__libc_init_array+0x3c>)
 800089a:	1b64      	subs	r4, r4, r5
 800089c:	10a4      	asrs	r4, r4, #2
 800089e:	2600      	movs	r6, #0
 80008a0:	42a6      	cmp	r6, r4
 80008a2:	d109      	bne.n	80008b8 <__libc_init_array+0x24>
 80008a4:	4d0b      	ldr	r5, [pc, #44]	; (80008d4 <__libc_init_array+0x40>)
 80008a6:	4c0c      	ldr	r4, [pc, #48]	; (80008d8 <__libc_init_array+0x44>)
 80008a8:	f000 f818 	bl	80008dc <_init>
 80008ac:	1b64      	subs	r4, r4, r5
 80008ae:	10a4      	asrs	r4, r4, #2
 80008b0:	2600      	movs	r6, #0
 80008b2:	42a6      	cmp	r6, r4
 80008b4:	d105      	bne.n	80008c2 <__libc_init_array+0x2e>
 80008b6:	bd70      	pop	{r4, r5, r6, pc}
 80008b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80008bc:	4798      	blx	r3
 80008be:	3601      	adds	r6, #1
 80008c0:	e7ee      	b.n	80008a0 <__libc_init_array+0xc>
 80008c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80008c6:	4798      	blx	r3
 80008c8:	3601      	adds	r6, #1
 80008ca:	e7f2      	b.n	80008b2 <__libc_init_array+0x1e>
 80008cc:	080008f4 	.word	0x080008f4
 80008d0:	080008f4 	.word	0x080008f4
 80008d4:	080008f4 	.word	0x080008f4
 80008d8:	080008f8 	.word	0x080008f8

080008dc <_init>:
 80008dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008de:	bf00      	nop
 80008e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008e2:	bc08      	pop	{r3}
 80008e4:	469e      	mov	lr, r3
 80008e6:	4770      	bx	lr

080008e8 <_fini>:
 80008e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ea:	bf00      	nop
 80008ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008ee:	bc08      	pop	{r3}
 80008f0:	469e      	mov	lr, r3
 80008f2:	4770      	bx	lr
